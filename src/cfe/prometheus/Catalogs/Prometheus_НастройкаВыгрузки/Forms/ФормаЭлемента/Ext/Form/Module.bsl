
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполняем параметры запроса
	Если ЗначениеЗаполнено(Объект.ТЧЗначенияПараметров) Тогда
		ЗначенияПараметров.Загрузить(ОбщегоНазначения.ЗначениеИзСтрокиXML(Объект.ТЧЗначенияПараметров));
	КонецЕсли; 
	
	// Заполняем доступные поля
	Если ЗначениеЗаполнено(Объект.ТЧПоляМетрик) Тогда
		ЗначенияПараметров.Загрузить(ОбщегоНазначения.ЗначениеИзСтрокиXML(Объект.ТЧПоляМетрик));
	КонецЕсли; 
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьНадписьРасписанияОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ТЧЗначенияПараметров = ОбщегоНазначения.ЗначениеВСтрокуXML(ЗначенияПараметров.Выгрузить());
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли; 
	
	Если Не ТекущийОбъект.Код = "" Тогда
		
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Объект.ИдентификаторРегламентногоЗадания);
		
		Если Задание = Неопределено Тогда
			Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание("ЗапускДополнительныхОбработок");
			Задание.Использование = Истина;
			Задание.Ключ = Строка(Новый УникальныйИдентификатор);
			ТекущийОбъект.ИдентификаторРегламентногоЗадания = Задание.УникальныйИдентификатор;
		КонецЕсли; 
		
		Задание.Наименование = "Prometheus " + ТекущийОбъект.Наименование;
		
		ПараметрыЗадания = Новый Массив;
		
		ПараметрыЗадания.Добавить(ТекущийОбъект.Ссылка);
		ПараметрыЗадания.Добавить("Prometheus_Сервер.ЗаданиеОтправкиМетрик("""+ ТекущийОбъект.Код +""")");
		
		Задание.Параметры = ПараметрыЗадания;
		Задание.Расписание = РасписаниеРегламентногоЗадания;
		Задание.Записать();
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Код настройки не записан в регламентном задании");
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапросаПриИзменении(Элемент)
	
	ЗаполнитьПараметрыИПоляЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыИПоляЗапроса()
	
	ДанныеИзЗапроса = ДанныеИзЗапросаНаСервере(Объект.ТекстЗапроса);
	
	ЗаполнитьПараметрыЗапроса(ДанныеИзЗапроса.ПараметрыЗапроса);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыЗапроса(ПараметрыЗапроса)
	
	Для каждого СтрокаПараметров Из ЗначенияПараметров Цикл
		
		СтрокаПараметров.Используется = Ложь;
		
	КонецЦикла; 
	
	Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		
		ПараметрыОтбораПааметров = Новый Структура;
		ПараметрыОтбораПааметров.Вставить("ИмяПараметра", ПараметрЗапроса);
		
		СтрокиУказанныхПараметров = ЗначенияПараметров.НайтиСтроки(ПараметрыОтбораПааметров);
		
		Если СтрокиУказанныхПараметров.Количество() = 0 Тогда
			НоваяСтрокаПараметра = ЗначенияПараметров.Добавить();
			НоваяСтрокаПараметра.ИмяПараметра = ПараметрЗапроса;
			НоваяСтрокаПараметра.Используется = Истина;
		Иначе
			СтрокиУказанныхПараметров[0].Используется = Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеИзЗапросаНаСервере(ТекстЗапроса)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ПараметрыЗапроса = СхемаЗапроса.НайтиПараметры();
	
	КоличествоПакетов = СхемаЗапроса.ПакетЗапросов.Количество();
	
	КолонкиЗапроса = СхемаЗапроса.ПакетЗапросов[КоличествоПакетов - 1].Колонки;
	
	МассивКолонок = Новый Массив;
	Для каждого КолонкаЗапроса Из КолонкиЗапроса Цикл
		МассивКолонок.Добавить(КолонкаЗапроса.Псевдоним);
	КонецЦикла; 
	
	МассивПараметров = Новый Массив;
	Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		МассивПараметров.Добавить(ПараметрЗапроса.Имя);
	КонецЦикла; 
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("КолонкиЗапроса", МассивКолонок);
	СтруктураДанных.Вставить("ПараметрыЗапроса", МассивПараметров);
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура ЗначенияПараметровЗначениеПараметраОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ЗначенияПараметров.ТекущиеДанные;
	Если ТипЗнч(ТекущаяСтрока.ЗначениеПараметра) = Тип("Строка") 
		И ТекущаяСтрока.Вычисляемый = Истина Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЭлементФормы" , Элемент);
		ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
		ОповещениеОЗакрытие = Новый ОписаниеОповещения("ОбработатьРезультатВводаТекстаПараметра", ЭтотОбъект, ДополнительныеПараметры);
		
		Подсказка = "Код вычисления параметра";
		
		Если ТекущаяСтрока.ЗначениеПараметра = "" Тогда
			ПредзаполненныйТекст = "ЗначениеПараметра = ";
		Иначе
			ПредзаполненныйТекст = ТекущаяСтрока.ЗначениеПараметра;
		КонецЕсли; 
		
		ПоказатьВводСтроки(ОповещениеОЗакрытие, ПредзаполненныйТекст, Подсказка, 0, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВводаТекстаПараметра(ТекстПараметра, ДополнительныеПараметры) Экспорт
	
	Если ТекстПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ТекущаяСтрока.ЗначениеПараметра = ТекстПараметра;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ОтправитьМетрикиНаСервере()
	
	Prometheus_Сервер.ОтправитьМетрики(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьМетрики(Команда)
	ОтправитьМетрикиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли; 
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьИзменятьРасписание", ЭтотОбъект);
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменятьРасписание(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	РасписаниеРегламентногоЗадания = РасписаниеЗадания;
	
	УстановитьНадписьРасписанияОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПримерНаСервере(ТипМетрики)
	
	СтруктураНастроек = Справочники.Prometheus_НастройкаВыгрузки.ПримерЗаполнения(ТипМетрики);
	
	// Заполнение реквизитов
	ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроек);
	
	// Заполнение табличной части ТЧЗначенияПараметров
	Для каждого ЭлементТЧЗначенияПараметров Из СтруктураНастроек.МассивТЧЗначенияПараметров Цикл
		
		СтрокаЗначенияПараметров = ЗначенияПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗначенияПараметров, ЭлементТЧЗначенияПараметров);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПример(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьОтветЗаполнениеПримера", ЭтаФорма);
	
	ПоказатьВопрос(Оповещение, "Элемент будет заполнен тестовыми данными, несохраненные параметры будут утеряны. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПримерПродолжение()
	
	Если ЗначениеЗаполнено(Объект.ТипМетрики) Тогда
		
		ЗаполнитьПримерНаСервере(Объект.ТипМетрики);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьОтветВыборМетрики", ЭтаФорма, );
		
		//ПоказатьВыборИзСписка(Оповещение, Объект.
		
		ПоказатьВводЗначения(Оповещение, Объект.ТипМетрики, "Выберите тип метрики для заполнения примера");
		
		//ПоказатьВопрос(Оповещение, "Элемент будет заполнен тестовыми данными, несохраненные параметры будут утеряны. Продолжить?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветЗаполнениеПримера(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда	 
		ЗаполнитьПримерПродолжение();
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьОтветВыборМетрики(Ответ, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Ответ) Тогда
		Объект.ТипМетрики = Ответ;
		ЗаполнитьПримерПродолжение();
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере(ТекущийОбъект = Неопределено)
	
	Если Не ТекущийОбъект = Неопределено Тогда
		
		УстановитьРасписаниеРегламентногоЗаданияПриЧтенииНаСервере(ТекущийОбъект);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		ТекстЗаголовка = "Настроить расписание обмена";
	Иначе
		ТекстЗаголовка = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Элементы.НастроитьРасписание.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписаниеРегламентногоЗаданияПриЧтенииНаСервере(ТекущийОбъект)
	
	Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Объект.ИдентификаторРегламентногоЗадания);
	
	Если Не Задание = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Задание.Расписание;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	ВыполнитьНастройкуРасписанияОбмена();
	УстановитьНадписьРасписанияОбмена();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьМетрикиНаСервере()
	
	СтруктураНастроек = Prometheus_Сервер.СтруктураНастроекВыгрузки(Объект.Ссылка);
	
	МетрикиДляОтправки = Prometheus_Сервер.ПолучитьМетрикиДляОтправки(СтруктураНастроек);
	
	Если ТипЗнч(МетрикиДляОтправки) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		РезультатЗапроса = МетрикиДляОтправки.Владелец();
		
		ТаблицаЗначенийДляФормы = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
	КонецЕсли;
	
	// Удаляем старую таблицу
	СтруктураТаблицаЗначенийДляФормы = Новый Структура("ТаблицаЗначенийДляФормы", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураТаблицаЗначенийДляФормы, ЭтотОбъект);
	Если Не СтруктураТаблицаЗначенийДляФормы["ТаблицаЗначенийДляФормы"] = Неопределено Тогда
		МассивУдаляемыхРеквизитов = Новый Массив;
		МассивУдаляемыхРеквизитов.Добавить("ТаблицаЗначенийДляФормы");
		ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	КонецЕсли;
	
	Если Не Элементы.Найти("ТаблицаЗначенийДляФормы") = Неопределено Тогда
		Элементы.Удалить(Элементы.ТаблицаЗначенийДляФормы);
	КонецЕсли; 
	
	// Добавляем таблицу по результатам запроса
	
	МассивТипаВыбора = Новый Массив;
	//МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
	МассивТипаВыбора.Добавить(Тип("ДеревоЗначений"));
	ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТаблицаЗначенийДляФормы", ОписаниеТипаВыбора, "", "Результат сопоставления"));
	
	Для Каждого КолонкаТаблицаЗначенийДляФормы Из ТаблицаЗначенийДляФормы.Колонки Цикл
		
		МассивРеквизитов.Добавить(Новый РеквизитФормы(КолонкаТаблицаЗначенийДляФормы.Имя, КолонкаТаблицаЗначенийДляФормы.ТипЗначения,"ТаблицаЗначенийДляФормы"));
		
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов);      
	
	ЭлементТаблица = Элементы.Добавить("ТаблицаЗначенийДляФормы", Тип("ТаблицаФормы"), Элементы.ГруппаРезультатСбора);
	ЭлементТаблица.ПутьКДанным = "ТаблицаЗначенийДляФормы";
	//ЭлементТаблица.Отображение = ОтображениеТаблицы.Список;
	ЭлементТаблица.Отображение = ОтображениеТаблицы.Дерево;
	ЭлементТаблица.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементТаблица.ИзменятьСоставСтрок = Ложь;    
	
	Для Каждого Колонка Из ТаблицаЗначенийДляФормы.Колонки Цикл
		НовыйЭлемент = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), ЭлементТаблица);
		НовыйЭлемент.ПутьКДанным = "ТаблицаЗначенийДляФормы" + "." + Колонка.Имя;
		Если Колонка.Имя = "Выб" Тогда
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		Иначе
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.КнопкаОчистки = Ложь;
			НовыйЭлемент.КнопкаВыбора = Ложь;
			НовыйЭлемент.РедактированиеТекста = Ложь;
			НовыйЭлемент.КнопкаОткрытия = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТаблицаЗначенийДляФормы, "ТаблицаЗначенийДляФормы");
	
	Если ТипЗнч(МетрикиДляОтправки) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		Элементы.ДекорацияРезультатСбора.Заголовок = "Выборка из результата запроса. При обходе обрабатываются первые два уровня";
	Иначе
		Элементы.ДекорацияРезультатСбора.Заголовок = Строка(ТипЗнч(МетрикиДляОтправки)) + " не поддерживается для отправки метрк";
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьМетрики(Команда)
	ПолучитьМетрикиНаСервере();
КонецПроцедуры


#КонецОбласти
