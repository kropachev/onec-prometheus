
#Область ПрограммныйИнтерфейс

// Обработчик регламентного задания отправки метрик
// 
// Параметры:
//  КодНастройки - Строка - Код настройки
Процедура ЗаданиеОтправкиМетрик(КодНастройки) Экспорт
	
	Если Не ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли; 
	
	НастройкаВыгрузки = Справочники.Prometheus_НастройкаВыгрузки.НайтиПоКоду(КодНастройки);
	
	Если Не ЗначениеЗаполнено(НастройкаВыгрузки) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НастройкаВыгрузки.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли; 
	
	ОтправитьМетрики(НастройкаВыгрузки);
	
КонецПроцедуры

// Общая процедура отправки метрик
// 
// Параметры:
//  НастройкаВыгрузки - СправочникСсылка.Prometheus_НастройкаВыгрузки - Настройка выгрузки
// 
// Возвращаемое значение:
//  Булево - Отправить метрики
Функция ОтправитьМетрики(НастройкаВыгрузки) Экспорт
	
	СтруктураНастроек = СтруктураНастроекВыгрузки(НастройкаВыгрузки);
	
	МетрикиДляОтправки = ПолучитьМетрикиДляОтправки(СтруктураНастроек);
	
	Если СтруктураНастроек.ТипМетрики = Перечисления.Prometheus_ТипыМертик.Counter Тогда
		
		РезультатОтправки = ОтправитьМетрикиСчетчик(СтруктураНастроек, МетрикиДляОтправки);
		
	ИначеЕсли СтруктураНастроек.ТипМетрики = Перечисления.Prometheus_ТипыМертик.Gauge Тогда
		
		РезультатОтправки = ОтправитьМетрикиШкала(СтруктураНастроек, МетрикиДляОтправки);
		
	ИначеЕсли СтруктураНастроек.ТипМетрики = Перечисления.Prometheus_ТипыМертик.Histogram Тогда
		
		РезультатОтправки = ОтправитьМетрикиГистограмма(СтруктураНастроек, МетрикиДляОтправки);
		
	ИначеЕсли СтруктураНастроек.ТипМетрики = Перечисления.Prometheus_ТипыМертик.Summary Тогда
		
		РезультатОтправки = ОтправитьМетрикиСводка(СтруктураНастроек, МетрикиДляОтправки);
		
	Иначе
		
		ВызватьИсключение("В настройках выгрузки указан непредусмотренный тип метрик.");
		
	КонецЕсли;
	
	Если РезультатОтправки = Истина Тогда
		
		УстановитьГраницуСбораМетрикUTC(СтруктураНастроек.НастройкаВыгрузки, СтруктураНастроек.ГраницаЗавершенияСбора);
		
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Возвращает структуру настроей по настройке выгрузки
// 
// Параметры:
//  НастройкаВыгрузки - СправочникСсылка.Prometheus_НастройкаВыгрузки - Настройка выгрузки
// 
// Возвращаемое значение:
//  Неопределено, Структура - Структура настроек выгрузки.
Функция СтруктураНастроекВыгрузки(НастройкаВыгрузки) Экспорт
	
	ЗапросНастроек = Новый Запрос;
	ЗапросНастроек.Текст = 
	"ВЫБРАТЬ
	|	Prometheus_НастройкаВыгрузки.ТекстЗапроса КАК ТекстЗапроса,
	|	Prometheus_НастройкаВыгрузки.МетрикаИмя КАК МетрикаИмя,
	|	Prometheus_НастройкаВыгрузки.ТипМетрики КАК ТипМетрики,
	|	Prometheus_НастройкаВыгрузки.СпособСбора КАК СпособСбора,
	|	Prometheus_НастройкаВыгрузки.МетрикаКомментарий КАК МетрикаКомментарий,
	|	Prometheus_НастройкаВыгрузки.ТЧЗначенияПараметров КАК ТЧЗначенияПараметров,
	|	Prometheus_НастройкаВыгрузки.РазмерыБакетов.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ЦелевоеЗначение КАК ЦелевоеЗначение
	|	) КАК РазмерыБакетов
	|ИЗ
	|	Справочник.Prometheus_НастройкаВыгрузки КАК Prometheus_НастройкаВыгрузки
	|ГДЕ
	|	Prometheus_НастройкаВыгрузки.Ссылка = &НастройкаВыгрузки";
	
	ЗапросНастроек.УстановитьПараметр("НастройкаВыгрузки", НастройкаВыгрузки);
	
	РезультатЗапроса = ЗапросНастроек.Выполнить();
	
	ВыборкаНастроек = РезультатЗапроса.Выбрать();
	
	Если ВыборкаНастроек.Следующий() Тогда
		
		// Заполняем стандартрые параметры
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("ТекстЗапроса", 			ВыборкаНастроек.ТекстЗапроса);
		СтруктураНастроек.Вставить("МетрикаИмя", 			ВыборкаНастроек.МетрикаИмя);
		СтруктураНастроек.Вставить("ТипМетрики", 			ВыборкаНастроек.ТипМетрики);
		СтруктураНастроек.Вставить("СпособСбора", 			ВыборкаНастроек.СпособСбора);
		СтруктураНастроек.Вставить("МетрикаКомментарий", 	ВыборкаНастроек.МетрикаКомментарий);
		
		// Граница завершения сбора всегда текущая дата минус 1 секунда
		ГраницаЗавершенияСбора = ТекущаяУниверсальнаяДата() - 1;
		СтруктураНастроек.Вставить("ГраницаЗавершенияСбора", ГраницаЗавершенияСбора);
		
		// Размеры бакетов
		РазмерыБакетов = Новый Массив;
		ВыборкаРазмерыБакетов = ВыборкаНастроек.РазмерыБакетов.Выбрать();
		Пока ВыборкаРазмерыБакетов.Следующий() Цикл
			
			РазмерыБакетов.Добавить(ВыборкаРазмерыБакетов.ЦелевоеЗначение);
			
		КонецЦикла; 
		
		СтруктураНастроек.Вставить("РазмерыБакетов", 		РазмерыБакетов);
		
		// Заполняем параметры для запроса, при необходимости вычисляем
		СтруктураПараметровЗапроса = Новый Структура;
		
		ТаблицаЗначенийПараметров = ОбщегоНазначения.ЗначениеИзСтрокиXML(ВыборкаНастроек.ТЧЗначенияПараметров);
		
		Для каждого СтрокаЗначенийПараметров Из ТаблицаЗначенийПараметров Цикл
			
			Если СтрокаЗначенийПараметров.Вычисляемый = Истина Тогда
				ЗначениеПараметра = Неопределено;
				Выполнить(СтрокаЗначенийПараметров.ЗначениеПараметра);
			Иначе
				ЗначениеПараметра = СтрокаЗначенийПараметров.ЗначениеПараметра;
			КонецЕсли; 
			
			СтруктураПараметровЗапроса.Вставить(СтрокаЗначенийПараметров.ИмяПараметра, ЗначениеПараметра);
			
		КонецЦикла; 
		
		СтруктураНастроек.Вставить("ПараметрыЗапроса", 		СтруктураПараметровЗапроса);
		
		СтруктураНастроек.Вставить("НастройкаВыгрузки", 	НастройкаВыгрузки);
		
		Возврат СтруктураНастроек;
	Иначе
		
		Возврат Неопределено;
					
	КонецЕсли; 
	
КонецФункции

// Возвращает метрики для отправки
// 
// Параметры:
//  СтруктураНастроек - Структура - Структура настроек:
// 
// Возвращаемое значение:
//  Неопределено, ВыборкаИзРезультатаЗапроса - Получить метрики для отправки
Функция ПолучитьМетрикиДляОтправки(СтруктураНастроек) Экспорт
	
	Если СтруктураНастроек.СпособСбора = Перечисления.Prometheus_СпособыСбораМерик.Запрос Тогда
		
		ЗапросМетрик = Новый Запрос;
		
		ЗапросМетрик.Текст = СтруктураНастроек.ТекстЗапроса;
		
 		Для каждого ПараметрЗапроса Из СтруктураНастроек.ПараметрыЗапроса Цикл
			
			ЗапросМетрик.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			
		КонецЦикла; 
		
		РезультатЗапросаМетрик = ЗапросМетрик.Выполнить();
		
		РезультатСбора = РезультатЗапросаМетрик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	ИначеЕсли СтруктураНастроек.СпособСбора = Перечисления.Prometheus_СпособыСбораМерик.ПроизвольныйКод Тогда
		
		РезультатСбора = Неопределено;
		
		Выполнить(СтруктураНастроек.ТекстЗапроса);
		
	Иначе
		
		ВызватьИсключение("Отсутствует обработчик для выбранного способа сбора метрик.");
		
	КонецЕсли; 
	
	Возврат РезультатСбора;
		
КонецФункции

// Отправляем метрики с типом Счетчик
// Пример с сайта https:// prometheus.io/docs/instrumenting/exposition_formats/
// 
// # HELP http_requests_total The total number of HTTP requests.
// # TYPE http_requests_total counter
// http_requests_total{method="post",code="200"} 1027 1395066363000
// http_requests_total{method="post",code="400"}    3 1395066363000
// 
// # Escaping in label values:
// msdos_file_access_time_seconds{path="C:\\DIR\\FILE.TXT",error="Cannot find file:\n\"FILE.TXT\""} 1.458255915e9
// 
// # Minimalistic line:
// metric_without_timestamp_and_labels 12.47
// 
// # A weird metric from before the epoch:
// something_weird{problem="division by zero"} +Inf -3982045
// 
// Параметры:
//  СтруктураНастроек - Структура - Структура настроек.
//  МетрикиДляОтправки - ВыборкаИзРезультатаЗапроса, Неопределено - Метрики для отправки
// 
// Возвращаемое значение:
//  Булево - Отправить метрики счетчик
Функция ОтправитьМетрикиСчетчик(СтруктураНастроек, МетрикиДляОтправки) Экспорт
	
	ПараметрыОтправки = ПараметрыОтправкиМетрикВPushgateway();
	
	Пока МетрикиДляОтправки.Следующий() Цикл
		
		СписокПараметровЗаписи = Новый Структура();
		
		СписокПараметровЗаписи.Вставить("MetricsName", СтруктураНастроек.МетрикаИмя);
		СписокПараметровЗаписи.Вставить("MetricsComments", СтруктураНастроек.МетрикаКомментарий);
		СписокПараметровЗаписи.Вставить("ПараметрыОтправки", "");
		
		// Вставляем одну метку
		LabelsList = Новый Структура;	
		LabelsList.Вставить("keyoperation", МетрикиДляОтправки.КлючеваяОперацияСтрока);		
		
		ПараметрыОтправки.Вставить("LabelsList", LabelsList);
		ПараметрыОтправки.Вставить("MetricsName", СтруктураНастроек.МетрикаИмя);
		
		MetricsName = СтруктураНастроек.МетрикаИмя;
		MetricsComments = СтруктураНастроек.МетрикаКомментарий;	
		
		// Формируем заголовок метрики. Для всех типов он будет одинаковым
		MetricsHeader = "# HELP " + MetricsName + " " + MetricsComments + "
		|# TYPE " + MetricsName + " " + "Counter" + "
		|";	
		
		MetricsBody = "";
		
		// Успех
		MetricsBody = MetricsBody + "
		|" + MetricsName + "{result=""" + "completed"
		+ """} " + Формат(МетрикиДляОтправки.КоличествоУспешныхВыполнений, "ЧДЦ=1;ЧРД=.;ЧН=0;ЧГ=0");
		
		// С ошибкой
		MetricsBody = MetricsBody + "
		|" + MetricsName + "{result=""" + "failed"
		+ """} " + Формат(МетрикиДляОтправки.КоличествоВыполненияСОшибкой, "ЧДЦ=1;ЧРД=.;ЧН=0;ЧГ=0");
		
		MetricsBody = MetricsHeader + MetricsBody + "
		|";
		
		ПараметрыОтправки.Вставить("MetricsBody", MetricsBody);
		
		РезультатОтправки = ОтправитьМетрикуВPushgetway(ПараметрыОтправки);
		
		Если РезультатОтправки = Ложь Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Отправляем метрики с типом Шкала
// Пример с сайта https:// prometheus.io/docs/instrumenting/exposition_formats/
// Аналогичен примеру counter
// 
// # HELP http_requests_total The total number of HTTP requests.
// # TYPE http_requests_total counter
// http_requests_total{method="post",code="200"} 1027 1395066363000
// http_requests_total{method="post",code="400"}    3 1395066363000
// 
// # Escaping in label values:
// msdos_file_access_time_seconds{path="C:\\DIR\\FILE.TXT",error="Cannot find file:\n\"FILE.TXT\""} 1.458255915e9
// 
// # Minimalistic line:
// metric_without_timestamp_and_labels 12.47
// 
// # A weird metric from before the epoch:
// something_weird{problem="division by zero"} +Inf -3982045
// 
// Параметры:
//  СтруктураНастроек - Структура - Структура настроек:
//  МетрикиДляОтправки - ВыборкаИзРезультатаЗапроса, Неопределено - Метрики для отправки
// 
// Возвращаемое значение:
//  Булево - Отправить метрики шкала
Функция ОтправитьМетрикиШкала(СтруктураНастроек, МетрикиДляОтправки) Экспорт
	
	ПараметрыОтправки = ПараметрыОтправкиМетрикВPushgateway();
	
	СписокПараметровЗаписи = Новый Структура();
	
	СписокПараметровЗаписи.Вставить("MetricsName", СтруктураНастроек.МетрикаИмя);
	СписокПараметровЗаписи.Вставить("MetricsComments", СтруктураНастроек.МетрикаКомментарий);
	СписокПараметровЗаписи.Вставить("ПараметрыОтправки", "");
	
	// Вставляем одну метку
	LabelsList = Новый Структура;	
	// заменить на структуру
	LabelsList.Вставить("keyoperation", СтруктураНастроек.МетрикаКомментарий);
	
	ПараметрыОтправки.Вставить("LabelsList", LabelsList);
	ПараметрыОтправки.Вставить("MetricsName", СтруктураНастроек.МетрикаИмя);
	
	MetricsName = СтруктураНастроек.МетрикаИмя;
	MetricsComments = СтруктураНастроек.МетрикаКомментарий;	
	
	// Формируем заголовок метрики. Для всех типов он будет одинаковым
	MetricsHeader = "# HELP " + MetricsName + " " + MetricsComments + "
	|# TYPE " + MetricsName + " " + "counter" + "
	|";	
	
	MetricsBody = "";                  
	
	// Суммируем значения в массиве
	СоответствияИтоговМетрик = Новый Соответствие;
	
	Для каждого ЭлементМетрикиДляОтправки Из МетрикиДляОтправки Цикл
		
		ИтогМетрики = СоответствияИтоговМетрик.Получить(ЭлементМетрикиДляОтправки.ИмяПриложения);
		
		Если ИтогМетрики = Неопределено Тогда
			СоответствияИтоговМетрик.Вставить(ЭлементМетрикиДляОтправки.ИмяПриложения, 1);
		Иначе
			СоответствияИтоговМетрик.Вставить(ЭлементМетрикиДляОтправки.ИмяПриложения, ИтогМетрики + 1);
		КонецЕсли; 
		
	КонецЦикла; 
	
	Для Каждого ИтогМетрик Из СоответствияИтоговМетрик Цикл
		MetricsBody = MetricsBody + "
		|" + MetricsName + "{ApplicationName=""" + ИтогМетрик.Ключ
		+ """} " + Формат(ИтогМетрик.Значение, "ЧДЦ=1;ЧРД=.;ЧН=0;ЧГ=0");
	КонецЦикла;
	
	MetricsBody = MetricsHeader + MetricsBody + "
	|";
	
	ПараметрыОтправки.Вставить("MetricsBody", MetricsBody);
	
	РезультатОтправки = ОтправитьМетрикуВPushgetway(ПараметрыОтправки);
	
	Возврат РезультатОтправки;
	
КонецФункции

// Отправляем метрики с типом Гистограмма
// Пример с сайта https:// prometheus.io/docs/instrumenting/exposition_formats/
// 
// # A histogram, which has a pretty complex representation in the text format:
// # HELP http_request_duration_seconds A histogram of the request duration.
// # TYPE http_request_duration_seconds histogram
// http_request_duration_seconds_bucket{le="0.05"} 24054
// http_request_duration_seconds_bucket{le="0.1"} 33444
// http_request_duration_seconds_bucket{le="0.2"} 100392
// http_request_duration_seconds_bucket{le="0.5"} 129389
// http_request_duration_seconds_bucket{le="1"} 133988
// http_request_duration_seconds_bucket{le="+Inf"} 144320
// http_request_duration_seconds_sum 53423
// http_request_duration_seconds_count 144320
// 
// Параметры:
//  СтруктураНастроек - Структура - Структура настроек:
//  МетрикиДляОтправки - ВыборкаИзРезультатаЗапроса - Метрики для отправки
// 
// Возвращаемое значение:
//  Булево - Отправить метрики гистограмма
Функция ОтправитьМетрикиГистограмма(СтруктураНастроек, МетрикиДляОтправки) Экспорт
	
	ПараметрыОтправки = ПараметрыОтправкиМетрикВPushgateway();
	
	Пока МетрикиДляОтправки.Следующий() Цикл
		
		СписокПараметровЗаписи = Новый Структура();
		
		СписокПараметровЗаписи.Вставить("MetricsName", СтруктураНастроек.МетрикаИмя);
		СписокПараметровЗаписи.Вставить("MetricsComments", СтруктураНастроек.МетрикаКомментарий);
		СписокПараметровЗаписи.Вставить("ПараметрыОтправки", "");
		
		// Вставляем одну метку
		LabelsList = Новый Структура;	
		LabelsList.Вставить("keyoperation", МетрикиДляОтправки.КлючеваяОперацияСтрока);		
		
		ПараметрыОтправки.Вставить("LabelsList", LabelsList);
		ПараметрыОтправки.Вставить("MetricsName", СтруктураНастроек.МетрикаИмя);
		
		MetricsName = СтруктураНастроек.МетрикаИмя;
		MetricsComments = СтруктураНастроек.МетрикаКомментарий;	
		
		// Формируем заголовок метрики. Для всех типов он будет одинаковым
		MetricsHeader = "# HELP " + MetricsName + " " + MetricsComments + "
		|# TYPE " + MetricsName + " " + "histogram" + "
		|";	
		
		MetricsBody = "";
		
		// бакеты получаем по индексу 1, т.к. значение индексов уже рассчитаны.
		Бакеты = РазмерыБакетовПоЦелевомуЗначению(1, СтруктураНастроек.РазмерыБакетов);
		
		ВыборкаЗамеров = МетрикиДляОтправки.Выбрать();
		
		Если ВыборкаЗамеров.Количество() = 0 Тогда
			// Единственный замер
			ЗаполнитьБакетыМетрикой(Бакеты, МетрикиДляОтправки);
		Иначе
			// Детальный обход метрик
			Пока ВыборкаЗамеров.Следующий() Цикл
				ЗаполнитьБакетыМетрикой(Бакеты, ВыборкаЗамеров);
			КонецЦикла;
		КонецЕсли; 
		
		Для Каждого Бакет Из Бакеты Цикл
			БакетКлюч = Формат(Бакет.Ключ, "ЧРД=.; ЧН=");
			БакетЗначение = Формат(Бакет.Значение, "ЧДЦ=1;ЧРД=.;ЧН=0;ЧГ=0");
			MetricsBody = MetricsBody + "
			|" + MetricsName + "_bucket{le=""" + БакетКлюч + """} " + БакетЗначение;
		КонецЦикла;
		
		КоличествоЗамеров = Формат(МетрикиДляОтправки.КоличествоЗамеров, "ЧДЦ=1;ЧРД=.;ЧРГ=;ЧН=;ЧГ=0");
		ЗамерыСумма = Формат(МетрикиДляОтправки.ЗамерыСумма, "ЧДЦ=3;ЧРД=.;ЧРГ=;ЧН=;ЧГ=0");
		
		MetricsBody = MetricsHeader + MetricsBody + "
		|" + MetricsName + "_bucket{le=""+Inf""} " + КоличествоЗамеров + "
		|" + MetricsName + "_count " + КоличествоЗамеров + "
		|" + MetricsName + "_sum " + ЗамерыСумма + "
		|";
		
		ПараметрыОтправки.Вставить("MetricsBody", MetricsBody);				
		
		РезультатОтправки = ОтправитьМетрикуВPushgetway(ПараметрыОтправки);
		
		Если РезультатОтправки = Ложь Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Отправляем метрики с типом Сводка
// Пример с сайта https:// prometheus.io/docs/instrumenting/exposition_formats/
// 
// # Finally a summary, which has a complex representation, too:
// # HELP rpc_duration_seconds A summary of the RPC duration in seconds.
// # TYPE rpc_duration_seconds summary
// rpc_duration_seconds{quantile="0.01"} 3102
// rpc_duration_seconds{quantile="0.05"} 3272
// rpc_duration_seconds{quantile="0.5"} 4773
// rpc_duration_seconds{quantile="0.9"} 9001
// rpc_duration_seconds{quantile="0.99"} 76656
// rpc_duration_seconds_sum 1.7560473e+07
// rpc_duration_seconds_count 2693
// 
// Параметры:
//  СтруктураНастроек - Структура - Структура настроек:
//  МетрикиДляОтправки - ВыборкаИзРезультатаЗапроса - Метрики для отправки
// 
// Возвращаемое значение:
//  Булево - Отправить метрики сводка
Функция ОтправитьМетрикиСводка(СтруктураНастроек, МетрикиДляОтправки) Экспорт
	
	ПараметрыОтправки = ПараметрыОтправкиМетрикВPushgateway();
	
	Пока МетрикиДляОтправки.Следующий() Цикл
		
		СписокПараметровЗаписи = Новый Структура();
		
		СписокПараметровЗаписи.Вставить("MetricsName", СтруктураНастроек.МетрикаИмя);
		СписокПараметровЗаписи.Вставить("MetricsComments", СтруктураНастроек.МетрикаКомментарий);
		СписокПараметровЗаписи.Вставить("ПараметрыОтправки", "");
		
		// Вставляем одну метку
		LabelsList = Новый Структура;	
		LabelsList.Вставить("keyoperation", МетрикиДляОтправки.КлючеваяОперацияСтрока);		
		
		ПараметрыОтправки.Вставить("LabelsList", LabelsList);
		ПараметрыОтправки.Вставить("MetricsName", СтруктураНастроек.МетрикаИмя);
		
		MetricsName = СтруктураНастроек.МетрикаИмя;
		MetricsComments = СтруктураНастроек.МетрикаКомментарий;	
		
		// Формируем заголовок метрики. Для всех типов он будет одинаковым
		MetricsHeader = "# HELP " + MetricsName + " " + MetricsComments + "
		|# TYPE " + MetricsName + " " + "histogram" + "
		|";	
		
		MetricsBody = "";
		
		Бакеты = РазмерыБакетовПоЦелевомуЗначению(МетрикиДляОтправки.ЦелевоеВремя, СтруктураНастроек.РазмерыБакетов);
		
		ВыборкаЗамеров = МетрикиДляОтправки.Выбрать();
		
		Пока ВыборкаЗамеров.Следующий() Цикл
			
			Для каждого Бакет Из Бакеты Цикл
				
				Если ВыборкаЗамеров.APDEX >= Бакет.Ключ Тогда
					Бакеты.Вставить(Бакет.Ключ, Бакет.Значение + ВыборкаЗамеров.КоличествоЗамеров);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого Бакет Из Бакеты Цикл
			БакетКлюч = Формат(Бакет.Ключ, "ЧРД=.; ЧН=");
			БакетЗначение = Формат(Бакет.Значение, "ЧДЦ=1;ЧРД=.;ЧН=0;ЧГ=0");
			
			MetricsBody = MetricsBody + "
			|" + MetricsName + "_bucket{le=""" + БакетКлюч + """} " + БакетЗначение;
		КонецЦикла;
		
		КоличествоЗамеров = Формат(МетрикиДляОтправки.КоличествоЗамеров, "ЧДЦ=1;ЧРД=.;ЧРГ=;ЧН=;ЧГ=0");
		ЗамерыСумма = Формат(МетрикиДляОтправки.ЗамерыСумма, "ЧДЦ=3;ЧРД=.;ЧРГ=;ЧН=;ЧГ=0");
		
		MetricsBody = MetricsHeader + MetricsBody + "
		|" + MetricsName + "_bucket{le=""+Inf""} " + КоличествоЗамеров + "
		|" + MetricsName + "_count " + КоличествоЗамеров + "
		|" + MetricsName + "_sum " + ЗамерыСумма + "
		|";
		
		ПараметрыОтправки.Вставить("MetricsBody", MetricsBody);				
		
		РезультатОтправки = ОтправитьМетрикуВPushgetway(ПараметрыОтправки);
		
		Если РезультатОтправки = Ложь Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Возвращает структуру параметров для отправки метрик
// 
// Возвращаемое значение:
//  Структура -- Параметры отправки метрик в pushgateway
Функция ПараметрыОтправкиМетрикВPushgateway() Экспорт
	
	СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
	
	Если СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1 Тогда
		Если СтрНайти(СтрокаСоединенияИнформационнойБазы, "\") Тогда
			ПодстрокиСтрокиСоединения = СтрРазделить(СтрокаСоединенияИнформационнойБазы, "\");
			JobName = "FILEBASE";
			InstanceName = СократитьДвойныеКавычки(ПодстрокиСтрокиСоединения[ПодстрокиСтрокиСоединения.ВГраница()]);
		ИначеЕсли СтрНайти(СтрокаСоединенияИнформационнойБазы, "/") Тогда
			ПодстрокиСтрокиСоединения = СтрРазделить(СтрокаСоединенияИнформационнойБазы, "/");
			JobName = "FILEBASE";
			InstanceName = СократитьДвойныеКавычки(ПодстрокиСтрокиСоединения[ПодстрокиСтрокиСоединения.ВГраница()]);
		Иначе
			// Если почему-то не смогли определить путь.
			JobName = "OTHERJOB";
			InstanceName = "OTHERINSTANCE";
		КонецЕсли; 
	ИначеЕсли СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы), "SRVR=") = 1 Тогда
		ПодстрокиСтрокиСоединения = СтрРазделить(СтрокаСоединенияИнформационнойБазы, ";");
		JobName = СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[0], 7));
		InstanceName = СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[1], 6));
	Иначе
		// Пока неизвестно
		JobName = "OTHERJOB";
		InstanceName = "OTHERINSTANCE";
	КонецЕсли; 
	
	URL_Pushgetway = Константы.Prometheus_Pushgateway.Получить();	 
	
	Если ПустаяСтрока(URL_Pushgetway) Тогда
		ВызватьИсключение("Не указан Prometheus_Pushgateway.");
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура; 
	СтруктураПараметров.Вставить("URL_Pushgetway", URL_Pushgetway);
	СтруктураПараметров.Вставить("JobName", JobName);
	СтруктураПараметров.Вставить("InstanceName", InstanceName);
	
	Возврат СтруктураПараметров;
	
КонецФункции 

// Возвращает строку Base64URL из строки метрики.
// 
// Параметры:
//  СтрокаДанных - Строка - Строка данных
// 
// Возвращаемое значение:
//  Строка - Base64 URL
Функция Base64URL(СтрокаДанных) Экспорт
	
	СтрокаBaseURL = ПолучитьДвоичныеДанныеИзСтроки(СтрокаДанных);
	СтрокаBaseURL = ПолучитьBase64СтрокуИзДвоичныхДанных(СтрокаBaseURL);
	СтрокаBaseURL	= СтрЗаменить(СтрокаBaseURL, Символы.ПС, "");
	СтрокаBaseURL	= СтрЗаменить(СтрокаBaseURL, Символы.ВК, "");
	
	ДлинаСтроки	= СтрДлина(СтрокаBaseURL);
	ПоследнийСимвол = Сред(СтрокаBaseURL, ДлинаСтроки, 1);
	Пока ПоследнийСимвол = "=" Цикл
		ДлинаСтроки 	= ДлинаСтроки - 1;
		СтрокаBaseURL 		= Сред(СтрокаBaseURL, 1, ДлинаСтроки);
		ПоследнийСимвол = Сред(СтрокаBaseURL, ДлинаСтроки, 1);
	КонецЦикла;	
	
	СтрокаBaseURL = СтрЗаменить(СтрокаBaseURL, "+", "-");
	СтрокаBaseURL = СтрЗаменить(СтрокаBaseURL, "/", "_");
	
	Возврат СтрокаBaseURL;
	
КонецФункции 

// Возвращает дату последней успешной отправки метрик по настройке
// 
// Параметры:
//  НастройкаВыгрузки - СправочникСсылка.Prometheus_НастройкаВыгрузки - Настройка выгрузки
// 
// Возвращаемое значение:
//  Дата, Произвольный - Граница сбора метрик UTC
Функция ГраницаСбораМетрикUTC(НастройкаВыгрузки) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Prometheus_ГраницыСбораМетрик.ДатаПоследнейВыгрузкиUTC КАК ДатаПоследнейВыгрузкиUTC
	|ИЗ
	|	РегистрСведений.Prometheus_ГраницыСбораМетрик КАК Prometheus_ГраницыСбораМетрик
	|ГДЕ
	|	Prometheus_ГраницыСбораМетрик.НастройкаВыгрузки = &НастройкаВыгрузки";
	
	Запрос.УстановитьПараметр("НастройкаВыгрузки", НастройкаВыгрузки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.ДатаПоследнейВыгрузкиUTC;
		
	Иначе 
		
		Возврат Дата(1, 1, 1);
	
	КонецЕсли; 
	
КонецФункции

// Устанавливает дату последней успешной отправки метрик по настройке
// 
// Параметры:
//  НастройкаВыгрузки - СправочникСсылка.Prometheus_НастройкаВыгрузки - Настройка выгрузки
//  ДатаПоследнейВыгрузкиUTC - Число - Дата последней выгрузки UTC
Процедура УстановитьГраницуСбораМетрикUTC(НастройкаВыгрузки, ДатаПоследнейВыгрузкиUTC) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.Prometheus_ГраницыСбораМетрик.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.НастройкаВыгрузки = НастройкаВыгрузки;
	МенеджерЗаписи.ДатаПоследнейВыгрузкиUTC = ДатаПоследнейВыгрузкиUTC;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает Соответствие со значениями бакетов по целевому показателю
// 
// Параметры:
//  ЦелевойПоказатель - Число, Произвольный - Целевой показатель
//  РазмерыБакетов - Массив - Размеры бакетов
// 
// Возвращаемое значение:
//  Соответствие -- Размеры бакетов по целевому значению
Функция РазмерыБакетовПоЦелевомуЗначению(Знач ЦелевойПоказатель, РазмерыБакетов)
	
	Если Не ЗначениеЗаполнено(ЦелевойПоказатель) Тогда
		ЦелевойПоказатель = 1;
	КонецЕсли;
	
	РазмерыБакетовПоЦелевомуПоказателю = Новый Соответствие;
	
	Для каждого ЭлементБакет Из РазмерыБакетов Цикл
		
		РазмерыБакетовПоЦелевомуПоказателю.Вставить(ЦелевойПоказатель * ЭлементБакет, 0);
	
	КонецЦикла; 
	
	Возврат РазмерыБакетовПоЦелевомуПоказателю;
	
КонецФункции

// Непосредственная отправка метрики в сервис
// 
// Параметры:
//  ПараметрыОтправки - Структура - Параметры отправки
// 
// Возвращаемое значение:
//  Булево - Отправить метрику в pushgetway
Функция ОтправитьМетрикуВPushgetway(ПараметрыОтправки)
	
	JobName = ПараметрыОтправки.JobName;
	InstanceName = ПараметрыОтправки.InstanceName;	
	LabelsList = ПараметрыОтправки.LabelsList;	
	MetricsBody = ПараметрыОтправки.MetricsBody;
	
	Route = "metrics/job/" + JobName + "/instance/" + InstanceName + "/" + СтруктураВСтроку(LabelsList) + "";
	ПолныйАдрес = ПараметрыОтправки.URL_Pushgetway + Route;
	СтруктураURL = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПолныйАдрес);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "*/*");
	Заголовки.Вставить("Accept-Encoding", "gzip");
	Заголовки.Вставить("Connection", "keep-alive");
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ("/" + Route);
	HTTPЗапрос.УстановитьТелоИзСтроки(MetricsBody, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPЗапрос.Заголовки = Заголовки; 
	
	Сервер = СтруктураURL.Хост;
	Порт = СтруктураURL.Порт;
	Пользователь = "";
	Пароль = "";
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURL.Схема);
	Прокси = Новый ИнтернетПрокси(Ложь);
	Таймаут = 30;
	ЗащищенноеСоединение = Неопределено;
	ИспользоватьАутентификациюОС = Ложь;
	
	HTTPСоединение = Новый HTTPСоединение(
		Сервер,
		Порт,
		Пользователь, Пароль,
		Прокси,
		Таймаут,
		ЗащищенноеСоединение,
		ИспользоватьАутентификациюОС);	
	
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);	
	
	Если Не Ответ.КодСостояния = 200 Тогда
		
		ИмяСобытия = "Отправка метрик Prometheus Pushgateway";
		ТекстОшибки = "Ошибка отправки метрики "
		+ ПараметрыОтправки.MetricsName + Символы.ПС
		+ "Текст ошибки: "
		+ Ответ.ПолучитьТелоКакСтроку()
		+ "Маршрут: " + Символы.ПС
		+ Route;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Формирует строку с содержимым метрики
// 
// Параметры:
//  ВходящаяСтруктура - Структура - Входящая структура
// 
// Возвращаемое значение:
//  Строка -- Структура в строку
Функция СтруктураВСтроку(Знач ВходящаяСтруктура)
	
	СтроковоеПредставление = "";
	
	Для каждого Элемент Из ВходящаяСтруктура Цикл
		
		СтроковоеПредставление = СтроковоеПредставление 
			+ ?(НЕ ПустаяСтрока(СтроковоеПредставление), "/", "");		 
		СтроковоеПредставление = СтроковоеПредставление 
			+ "" + Элемент.Ключ + "@base64/" 
			+ Base64URL(СокрЛП(СтрЗаменить(Элемент.Значение, """", "")));
		
	КонецЦикла;
	
	Возврат СтроковоеПредставление;
	
КонецФункции

// Процедура заполняет заметр метрики в бакете по размерам
// 
// Параметры:
//  Бакеты - Соответствие - Бакеты с размерами
//  Замер - ВыборкаИзРезультатаЗапроса - Замер
Процедура ЗаполнитьБакетыМетрикой(Бакеты, Замер)
	
	Для каждого Бакет Из Бакеты Цикл
		
		Если Замер.APDEX >= Бакет.Ключ Тогда
			Бакеты.Вставить(Бакет.Ключ, Бакет.Значение + Замер.КоличествоЗамеров);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет двойные кавычки с начала и конца строки, если они есть.
// 
// Параметры:
// Значение - Строка - входная строка.
// 
// Возвращаемое значение:
// Строка - строка без двойных кавычек.
// 
Функция СократитьДвойныеКавычки(Знач Значение) Экспорт
	
	Пока СтрНачинаетсяС(Значение, """") Цикл
		Значение = Сред(Значение, 2); 
	КонецЦикла; 
	
	Пока СтрЗаканчиваетсяНа(Значение, """") Цикл
		Значение = Лев(Значение, СтрДлина(Значение) - 1);
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти